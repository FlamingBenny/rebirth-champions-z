_G.autoclick = false
_G.autohatch = false 
_G.autorebirth = false
_G.autochest = false
_G.autocraft = false
_G.autopotion = false -- enabling this can spend all your clicks if you have over atleast 2 O clicks
_G.autoindex = false
_G.WorldBoost = true
_G.autopetmachine = false

local NotificationBindable = Instance.new("BindableFunction")
NotificationBindable.OnInvoke = callback
--
game.StarterGui:SetCore("SendNotification",  {
 Title = "Welcome";
 Text = "enjoy and read info for more";
 Icon = "";
 Duration = 5;
 Callback = NotificationBindable;
})

local NotificationBindable = Instance.new("BindableFunction")
NotificationBindable.OnInvoke = callback
--
game.StarterGui:SetCore("SendNotification",  {
 Title = "Info";
 Text = "When you choose an option for either rebirths of eggs, enable it first then choose or it wont work";
 Icon = "";
 Duration = 13;
 Callback = NotificationBindable;
})

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua')))()

local w = library:CreateWindow("Rebirth Champions X")

local b = w:CreateFolder("Farming") 

local c = w:CreateFolder("Pets") 

local d = w:CreateFolder("Extras") 

d:DestroyGui()



b:Toggle("Auto Click",function(bool)
    _G.autoclick = bool
    if bool then
        doClick()
end
end)

b:Dropdown("Rebirth Options", {"1", "5","10","25","100","500","2.5K","5K","10K","50K","250K","1M","25M","100M","500M","1B","2.5B","10B","250B","1T","10T","25T","100T","250T","1Qd","2.5Qd","10Qd","50Qd"}, true, function(chosen)
if chosen == "1" then
    while _G.autorebirth == true do
        local args = {
    [1] = (1)
}

game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "5" then
    while _G.autorebirth == true do
        local args = {
    [1] = (2)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "10" then
    while _G.autorebirth == true do
        local args = {
    [1] = (3)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "25" then
    while _G.autorebirth == true do
        local args = {
    [1] = (4)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "100" then
    while _G.autorebirth == true do
        local args = {
    [1] = (5)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "500" then
    while _G.autorebirth == true do
        local args = {
    [1] = (6)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "2.5K" then
    while _G.autorebirth == true do
        local args = {
    [1] = (7)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "5K" then
    while _G.autorebirth == true do
        local args = {
    [1] = (8)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "10K" then
    while _G.autorebirth == true do
        local args = {
    [1] = (9)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "50K" then
    while _G.autorebirth == true do
        local args = {
    [1] = (10)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "250K" then
    while _G.autorebirth == true do
        local args = {
    [1] = (11)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "1M" then
    while _G.autorebirth == true do
        local args = {
    [1] = (12)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "25M" then
    while _G.autorebirth == true do
        local args = {
    [1] = (13)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "100M" then
    while _G.autorebirth == true do
        local args = {
    [1] = (14)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "500M" then
    while _G.autorebirth == true do
        local args = {
    [1] = (15)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "1B" then
    while _G.autorebirth == true do
        local args = {
    [1] = (16)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "2.5B" then
    while _G.autorebirth == true do
        local args = {
    [1] = (17)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "10B" then
    while _G.autorebirth == true do
        local args = {
    [1] = (18)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "250B" then
    while _G.autorebirth == true do
        local args = {
    [1] = (19)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "1T" then
    while _G.autorebirth == true do
        local args = {
    [1] = (20)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "10T" then
    while _G.autorebirth == true do
        local args = {
    [1] = (21)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "25T" then
    while _G.autorebirth == true do
        local args = {
    [1] = (22)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "100T" then
    while _G.autorebirth == true do
        local args = {
    [1] = (23)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "250T" then
    while _G.autorebirth == true do
        local args = {
    [1] = (24)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "1Qd" then
    while _G.autorebirth == true do
        local args = {
    [1] = (25)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "2.5Qd" then
    while _G.autorebirth == true do
        local args = {
    [1] = (26)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "10Qd" then
    while _G.autorebirth == true do
        local args = {
    [1] = (27)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
elseif chosen == "50Qd" then
    while _G.autorebirth == true do
        local args = {
    [1] = (28)
}
game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
end
end)
b:Toggle("Auto Rebirth",function(bool)
    _G.autorebirth = bool
    if bool and selectedRebirth then
        autorebirth(selectedRebirth)
end
end)

c:Dropdown("Eggs", {"Basic", "Mythic","Forest","Beach","Atlantis","Desert","Winter","Volcano","Magma","Moon","Cyber","Magic","Heaven","Nuclear","Void","Spooky"}, true, function(chosen)
if chosen == "Basic" then
while _G.autohatch == true do
local args = {
[1] = "Basic",
[2] = "Triple" 
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Mythic" then
    while _G.autohatch == true do
        local args = {
    [1] = "Mythic",
    [2] = "Triple" 
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Forest" then
while _G.autohatch == true do
local args = {
[1] = "Forest",
[2] = "Triple" 
 }
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Beach" then
while _G.autohatch == true do
local args = {
[1] = "Beach",
[2] = "Triple" 
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Atlantis" then
while _G.autohatch == true do
local args = {
[1] = "Atlantis",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Desert" then
while _G.autohatch == true do
local args = {
[1] = "Desert",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Winter" then
while _G.autohatch == true do
local args = {
[1] = "Winter",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Volcano" then
while _G.autohatch == true do
local args = {
[1] = "Volcano",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Magma" then
while _G.autohatch == true do
local args = {
[1] = "Magma",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Moon" then
while _G.autohatch == true do
local args = {
[1] = "Moon",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Cyber" then
while _G.autohatch == true do
local args = {
[1] = "Cyber",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Magic" then
while _G.autohatch == true do
local args = {
[1] = "Magic",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Heaven" then
while _G.autohatch == true do
local args = {
[1] = "Heaven",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Nuclear" then
while _G.autohatch == true do
local args = {
[1] = "Nuclear",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Void" then
while _G.autohatch == true do
local args = {
[1] = "Void",
[2] = "Triple" 
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
elseif chosen == "Spooky" then
while _G.autohatch == true do
local args = {
[1] = "Spooky",
[2] = "Triple" 
}
    
game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
end
end)
c:Toggle("Auto Hatch",function(bool)
    _G.autohatch = bool
    if bool then
        buyegg(eggname)
end
end)

c:Toggle("Auto Craft",function(bool)
    _G.autocraft = bool
    if bool then
        doCraft()
end
end)

d:Toggle("Auto Chest",function(bool)
    _G.autochest = bool
    if bool then
        autochest("Nuclear") -- Leave this as it is
end
end)

d:Toggle("Auto Potions",function(bool)
    _G.autopotion = bool
    if bool then
        doPotion()
end
end)

c:Toggle("Auto Index",function(bool)
    _G.autoindex = bool
    if bool then
        doIndex()
end
end)

d:Toggle("Auto Machine",function(bool)
    _G.autopetmachine = bool
    if bool then
        domachine()
end
end)

function doClick()
spawn(function ()
    while _G.autoclick == true do
        game:GetService("ReplicatedStorage").Events.Click3:FireServer()
wait ()
end
end)
end

function buyegg(eggname)
spawn(function ()
    while _G.autohatch == true do
        local args = {
    [1] = (chosen),
    [2] = "Triple" 
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))
wait ()
end
end)
end

function autorebirth(rebirthamount)
spawn(function ()
    while _G.autorebirth == true do
        local args = {
    [1] = (chosen)
}

game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
wait ()
end
end)
end

function autochest(chestname)
spawn(function ()
    while _G.autochest == true do
local args = {
    [1] = "Spawn"
}

game:GetService("ReplicatedStorage").Events.Chest:FireServer(unpack(args))
wait ()
local args = {
    [1] = "Beach"
}

game:GetService("ReplicatedStorage").Events.Chest:FireServer(unpack(args))
local args = {
    [1] = "Cyber"
}

game:GetService("ReplicatedStorage").Events.Chest:FireServer(unpack(args))
local args = {
    [1] = "Winter"
}

game:GetService("ReplicatedStorage").Events.Chest:FireServer(unpack(args))

local args = {
    [1] = "Nuclear"
}

game:GetService("ReplicatedStorage").Events.Chest:FireServer(unpack(args))

wait ()
end
end)
end

function doCraft()
spawn(function ()
    while _G.autocraft == true do
        local args = {
    [1] = "CraftAll",
    [2] = {}
}

game:GetService("ReplicatedStorage").Functions.Request:InvokeServer(unpack(args))
wait ()
end
end)
end

function doPotion()
spawn(function ()
    while _G.autopotion == true do
        
local args = {
    [1] = "x2Clicks"
}

game:GetService("ReplicatedStorage").Events.Potion:FireServer(unpack(args))
local args = {
    [1] = "x2Gems"
}

game:GetService("ReplicatedStorage").Events.Potion:FireServer(unpack(args))

local args = {
    [1] = "x2Luck"
}

game:GetService("ReplicatedStorage").Events.Potion:FireServer(unpack(args))

local args = {
    [1] = "x2Rebirths"
}

game:GetService("ReplicatedStorage").Events.Potion:FireServer(unpack(args))

local args = {
    [1] = "x2PetXP"
}

game:GetService("ReplicatedStorage").Events.Potion:FireServer(unpack(args))

local args = {
    [1] = "x2HatchSpeed"
}

game:GetService("ReplicatedStorage").Events.Potion:FireServer(unpack(args))

wait ()
end
end)
end

function doIndex()
spawn(function ()
    while _G.autoindex == true do
        
local args = {
    [1] = "Basic",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Mythic",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "5M",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Forest",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Beach",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Atlantis",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Desert",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Winter",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Volcano",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Magma",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Moon",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Cyber",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Magic",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Heaven",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Nuclear",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Void",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

local args = {
    [1] = "Spooky",
    [2] = "Triple"
}

game:GetService("ReplicatedStorage").Functions.Unbox:InvokeServer(unpack(args))

wait ()
end
end)
end

function domachine()
    spawn(function ()
    while _G.autopetmachine == true do
game:GetService("ReplicatedStorage").Functions.Machine:InvokeServer()
    wait ()
    end
    end)
    end

while _G.WorldBoost == true do

local args = {
    [1] = "Spooky"
}

game:GetService("ReplicatedStorage").Events.WorldBoost:FireServer(unpack(args))
wait ()
end
